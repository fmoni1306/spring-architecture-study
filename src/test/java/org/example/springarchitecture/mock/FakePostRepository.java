package org.example.springarchitecture.mock;

import lombok.RequiredArgsConstructor;
import org.example.springarchitecture.post.domain.Post;
import org.example.springarchitecture.post.service.port.PostRepository;

import java.util.ArrayList;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

@RequiredArgsConstructor
public class FakePostRepository implements PostRepository {

    private Long autoGeneratedId = 1L;
    private final List<Post> data = new ArrayList<>();

    @Override
    public Optional<Post> findById(Long id) {
        return data.stream().filter(post -> post.getId().equals(id)).findAny();
    }

    @Override
    public Post save(Post post) {
        // jpa 의존적이라 save, update를 구분하는게 좋아보인다.
        if (post.getId() == null || post.getId() == 0) {
            Post newPost = Post.builder()
                    .id(autoGeneratedId++)
                    .content(post.getContent())
                    .createdAt(post.getCreatedAt())
                    .modifiedAt(post.getModifiedAt())
                    .writer(post.getWriter())
                    .build();

            data.add(newPost);
            return newPost;
        } else {
            data.removeIf(item -> Objects.equals(item.getId(), post.getId()));
            data.add(post);
            return post;
        }
    }
}
